### docker-compose.yml
version: "3.9"

volumes:
  user-data:
  product-data:
  order-data:

networks:
  quickkart:        # single private bridge for the whole stack
    driver: bridge

services:
  # ──────────────── Core APIs ────────────────
  user-svc:
    build: ./user_svc
    env_file: ./user_svc/.env
    volumes:
      - user-data:/data
    ports: ["8000:8000"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 10s
      retries: 3
    networks: [quickkart]

  product-svc:
    build: ./product_svc
    env_file: ./product_svc/.env
    volumes:
      - product-data:/data
    ports: ["8001:8000"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 10s
      retries: 3
    networks: [quickkart]

  order-svc:
    build: ./order_svc
    env_file: ./order_svc/.env
    volumes:
      - order-data:/data
    ports: ["8002:8000"]
    depends_on:
      user-svc:    { condition: service_healthy }
      product-svc: { condition: service_healthy }
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthz"]
      interval: 10s
      retries: 3
    networks: [quickkart]

  notify-svc:
    build: ./notify_svc
    env_file: ./notify_svc/.env
    environment:
      - MAILHOG_HOST=mailhog
    depends_on:
      - mailhog
    ports: ["8010:8010"]     # ← published for local testing
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/healthz"]
      interval: 10s
      retries: 3
    networks: [quickkart]

  # ──────────────── Infra helper ────────────────
  mailhog:
    image: mailhog/mailhog:v1.0.1
    ports:
      - "8025:8025"   # web UI
      - "1025:1025"   # SMTP
    restart: unless-stopped
    networks: [quickkart]



### k8s\hpa-product.yaml
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: product-svc-hpa
  namespace: quickkart
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: product-svc
  minReplicas: 1
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70



### k8s\mailhog\deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mailhog
  namespace: quickkart
  labels: { app: mailhog }
spec:
  replicas: 1
  selector: { matchLabels: { app: mailhog } }
  template:
    metadata:
      labels: { app: mailhog }
    spec:
      containers:
      - name: mailhog
        image: mailhog/mailhog:v1.0.1
        ports:
        - { containerPort: 1025 }   # SMTP
        - { containerPort: 8025 }   # HTTP UI



### k8s\mailhog\service.yaml
apiVersion: v1
kind: Service
metadata:
  name: mailhog
  namespace: quickkart
  labels: { app: mailhog }
spec:
  selector: { app: mailhog }
  ports:
  - { name: smtp, port: 1025, targetPort: 1025 }
  - { name: http, port: 8025, targetPort: 8025 }



### k8s\monitoring\kube-prom-values.yaml
grafana:
  service:
    type: NodePort
    nodePort: 30080    # browse http://localhost:30080
  adminPassword: quickkart

prometheus:
  prometheusSpec:
    serviceMonitorSelectorNilUsesHelmValues: false



### k8s\namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: quickkart



### k8s\notify-svc\deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notify-svc
  namespace: quickkart
  labels: { app: notify-svc }
spec:
  replicas: 1
  selector: { matchLabels: { app: notify-svc } }
  template:
    metadata:
      labels: { app: notify-svc }
    spec:
      containers:
      - name: notify-svc
        image: notify-svc:latest
        imagePullPolicy: IfNotPresent
        ports: [{ containerPort: 8010 }]
        env:
        - { name: MAILHOG_HOST, value: mailhog.quickkart.svc.cluster.local }
        readinessProbe: { httpGet: { path: /healthz, port: 8010 }, initialDelaySeconds: 5 }
        livenessProbe:  { httpGet: { path: /healthz, port: 8010 }, initialDelaySeconds: 5 }



### k8s\notify-svc\service.yaml
apiVersion: v1
kind: Service
metadata:
  name: notify-svc
  namespace: quickkart
  labels: { app: notify-svc }
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path:   /metrics
    prometheus.io/port:   "8010"
spec:
  selector: { app: notify-svc }
  ports:
  - port: 8010
    targetPort: 8010



### k8s\order-svc\configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-svc-env
  namespace: quickkart
data:
  USER_SERVICE_URL:    http://user-svc.quickkart.svc.cluster.local:8000
  PRODUCT_SERVICE_URL: http://product-svc.quickkart.svc.cluster.local:8000
  NOTIFY_SERVICE_URL:  http://notify-svc.quickkart.svc.cluster.local:8010



### k8s\order-svc\deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-svc
  namespace: quickkart
  labels: { app: order-svc }
spec:
  replicas: 1
  selector: { matchLabels: { app: order-svc } }
  template:
    metadata:
      labels: { app: order-svc }
    spec:
      volumes:
      - name: data
        emptyDir: {}  
      containers:
      - name: order-svc
        image: order-svc:latest
        imagePullPolicy: IfNotPresent
        ports: [{ containerPort: 8000 }]
        volumeMounts:
        - name: data
          mountPath: /data  
        envFrom:
        - configMapRef: { name: order-svc-env }
        readinessProbe: { httpGet: { path: /healthz, port: 8000 }, initialDelaySeconds: 5 }
        livenessProbe:  { httpGet: { path: /healthz, port: 8000 }, initialDelaySeconds: 5 }



### k8s\order-svc\service.yaml
apiVersion: v1
kind: Service
metadata:
  name: order-svc
  namespace: quickkart
  labels: { app: order-svc }
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path:   /metrics
    prometheus.io/port:   "8000"
spec:
  selector: { app: order-svc }
  ports:
  - port: 8000
    targetPort: 8000



### k8s\product-svc\deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-svc
  namespace: quickkart
  labels: { app: product-svc }
spec:
  replicas: 1
  selector: { matchLabels: { app: product-svc } }
  template:
    metadata:
      labels: { app: product-svc }
    spec:
      volumes:
      - name: data
        emptyDir: {}  
      containers:
      - name: product-svc
        image: product-svc:latest
        imagePullPolicy: IfNotPresent
        ports: [{ containerPort: 8000 }]
        volumeMounts:
        - name: data
          mountPath: /data  
        readinessProbe: { httpGet: { path: /healthz, port: 8000 }, initialDelaySeconds: 5 }
        livenessProbe:  { httpGet: { path: /healthz, port: 8000 }, initialDelaySeconds: 5 }



### k8s\product-svc\service.yaml
apiVersion: v1
kind: Service
metadata:
  name: product-svc
  namespace: quickkart
  labels: { app: product-svc }
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path:   /metrics
    prometheus.io/port:   "8000"
spec:
  selector: { app: product-svc }
  ports:
  - port: 8000
    targetPort: 8000



### k8s\user-svc\deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-svc
  namespace: quickkart
  labels: { app: user-svc }
spec:
  replicas: 1
  selector: { matchLabels: { app: user-svc } }
  template:
    metadata:
      labels: { app: user-svc }
    spec:
      volumes:
      - name: data
        emptyDir: {}  
      containers:
      - name: user-svc
        image: user-svc:latest
        imagePullPolicy: IfNotPresent
        ports: [{ containerPort: 8000 }]
        volumeMounts:
        - name: data
          mountPath: /data  
        env:
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef: { name: user-svc-secret, key: JWT_SECRET }
        - { name: ACCESS_TOKEN_EXPIRE_MINUTES, value: "15" }
        readinessProbe: { httpGet: { path: /healthz, port: 8000 }, initialDelaySeconds: 5 }
        livenessProbe:  { httpGet: { path: /healthz, port: 8000 }, initialDelaySeconds: 5 }



### k8s\user-svc\secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: user-svc-secret
  namespace: quickkart
type: Opaque
stringData:
  JWT_SECRET: supersecretjwt



### k8s\user-svc\service.yaml
apiVersion: v1
kind: Service
metadata:
  name: user-svc
  namespace: quickkart
  labels: { app: user-svc }
  annotations:      # Prometheus scrape
    prometheus.io/scrape: "true"
    prometheus.io/path:   /metrics
    prometheus.io/port:   "8000"
spec:
  selector: { app: user-svc }
  ports:
  - port: 8000
    targetPort: 8000



### Makefile
dev:
	docker compose up --build

test:
	docker compose run --rm user-svc pytest
	docker compose run --rm product-svc pytest
	docker compose run --rm order-svc pytest


### notify_svc\Dockerfile
FROM python:3.11-slim AS builder
WORKDIR /app
COPY requirements.txt .
RUN pip wheel -r requirements.txt --no-cache-dir --no-deps -w /wheels

FROM python:3.11-slim
ENV PYTHONUNBUFFERED=1
RUN apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY --from=builder /wheels /wheels
RUN pip install --no-cache /wheels/*
COPY quickkart_notify/ ./quickkart_notify/
EXPOSE 8010
CMD ["uvicorn", "quickkart_notify.app:app", "--host", "0.0.0.0", "--port", "8010"]


### notify_svc\quickkart_notify\__init__.py


### notify_svc\quickkart_notify\app.py
from fastapi import FastAPI, BackgroundTasks

from prometheus_fastapi_instrumentator import Instrumentator

from . import emailer

app = FastAPI(title="QuickKart Notification Service")
Instrumentator().instrument(app).expose(app)

@app.get("/healthz")
def healthz():
    return {"status": "ok"}

@app.post("/email")
async def send_email(user_email: str, item: str, bg: BackgroundTasks):
    # called by order-svc
    bg.add_task(emailer.send_confirmation, user_email, item)
    return {"sent": True}


### notify_svc\quickkart_notify\emailer.py
import os, aiosmtplib, email.message

SMTP_HOST = os.getenv("SMTP_HOST", "mailhog")
SMTP_PORT = int(os.getenv("SMTP_PORT", "1025"))
FROM_ADDR = os.getenv("FROM_ADDR", "no-reply@quickkart.local")

async def send_confirmation(to_addr: str, item: str):
    msg = email.message.EmailMessage()
    msg["From"] = FROM_ADDR
    msg["To"] = to_addr
    msg["Subject"] = "Your QuickKart order"
    msg.set_content(f"Thank you for ordering \"{item}\". We will ship soon!")

    await aiosmtplib.send(msg, hostname=SMTP_HOST, port=SMTP_PORT)


### order_svc\Dockerfile
FROM python:3.11-slim AS builder
WORKDIR /app
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /wheels -r requirements.txt

FROM python:3.11-slim
ENV PYTHONUNBUFFERED=1

# ---- add curl for health-checks ----
RUN apt-get update \
 && apt-get install -y --no-install-recommends curl \
 && rm -rf /var/lib/apt/lists/*
 
WORKDIR /app
COPY --from=builder /wheels /wheels
RUN pip install --no-cache /wheels/*
COPY quickkart_order/ ./quickkart_order/
EXPOSE 8000
CMD ["uvicorn", "quickkart_order.app:app", "--host", "0.0.0.0", "--port", "8000"]



### order_svc\quickkart_order\__init__.py


### order_svc\quickkart_order\app.py
import asyncio

from fastapi import Depends, FastAPI, HTTPException, Security, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from prometheus_fastapi_instrumentator import Instrumentator
from sqlalchemy.orm import Session

from . import client, crud, database, models, schemas

models.Base.metadata.create_all(bind=database.engine)

app = FastAPI(title="QuickKart Order Service")
Instrumentator().instrument(app).expose(app)
bearer_scheme = HTTPBearer()


def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()


@app.get("/healthz")
def healthz():
    return {"status": "ok"}


async def get_current_user_email(
    creds: HTTPAuthorizationCredentials = Security(bearer_scheme),
):
    try:
        data = await client.validate_jwt(creds.credentials)
        return data["email"]
    except Exception as exc:  # noqa: BLE001
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail=str(exc),
        ) from exc


@app.post("/orders", response_model=schemas.OrderOut, status_code=201)
async def make_order(order_in: schemas.OrderCreate,
                     email: str = Depends(get_current_user_email),
                     db: Session = Depends(get_db)):
    # validate product exists
    if not await client.product_exists(order_in.item):
        raise HTTPException(status_code=404, detail="Item not in catalog")

    order = crud.create_order(db, email, order_in)
    # fire‑and‑forget email
    asyncio.create_task(client.email_confirmation(email, order_in.item))
    return order


@app.get("/orders", response_model=list[schemas.OrderOut])
def my_orders(
    email: str = Depends(get_current_user_email), db: Session = Depends(get_db)
):
    return crud.list_orders(db, email)



### order_svc\quickkart_order\client.py
import os, httpx

USER_SVC_URL   = os.getenv("USER_SERVICE_URL", "http://user-svc:8000")
PRODUCT_SVC_URL= os.getenv("PRODUCT_SERVICE_URL", "http://product-svc:8000")
NOTIFY_SVC_URL = os.getenv("NOTIFY_SERVICE_URL", "http://notify-svc:8010")

async def validate_jwt(token: str):
    headers = {"Authorization": f"Bearer {token}"}
    async with httpx.AsyncClient() as c:
        r = await c.get(f"{USER_SVC_URL}/verify", headers=headers, timeout=5)
        r.raise_for_status()
        return r.json()

async def product_exists(item: str) -> bool:
    async with httpx.AsyncClient() as c:
        r = await c.get(f"{PRODUCT_SVC_URL}/products", timeout=5)
        r.raise_for_status()
        return any(p["name"] == item for p in r.json())

async def email_confirmation(user_email: str, item: str):
    async with httpx.AsyncClient() as c:
        await c.post(f"{NOTIFY_SVC_URL}/email", params={"user_email": user_email, "item": item})


### order_svc\quickkart_order\crud.py
from sqlalchemy.orm import Session

from . import models, schemas


def create_order(db: Session, user_email: str, order_in: schemas.OrderCreate):
    order = models.Order(user_email=user_email, item=order_in.item)
    db.add(order)
    db.commit()
    db.refresh(order)
    return order


def list_orders(db: Session, user_email: str):
    return db.query(models.Order).filter(models.Order.user_email == user_email).all()



### order_svc\quickkart_order\database.py
import os

from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

DB_PATH = os.getenv("DB_PATH", "/data/orders.db")
SQLALCHEMY_DATABASE_URL = f"sqlite:///{DB_PATH}"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()



### order_svc\quickkart_order\models.py
from sqlalchemy import Column, Integer, String

from .database import Base

class Order(Base):
    __tablename__ = "orders"
    id = Column(Integer, primary_key=True, index=True)
    user_email = Column(String, index=True)
    item = Column(String, nullable=False)



### order_svc\quickkart_order\schemas.py
from pydantic import BaseModel, Field


class OrderCreate(BaseModel):
    item: str = Field(min_length=1)


class OrderOut(BaseModel):
    id: int
    user_email: str
    item: str

    class Config:
        orm_mode = True



### product_svc\Dockerfile
FROM python:3.11-slim AS builder
WORKDIR /app
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /wheels -r requirements.txt

FROM python:3.11-slim
ENV PYTHONUNBUFFERED=1
RUN apt-get update && apt-get install -y --no-install-recommends curl && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY --from=builder /wheels /wheels
RUN pip install --no-cache /wheels/*
COPY quickkart_product/ ./quickkart_product/
EXPOSE 8000
CMD ["uvicorn", "quickkart_product.app:app", "--host", "0.0.0.0", "--port", "8000"]


### product_svc\quickkart_product\__init__.py


### product_svc\quickkart_product\app.py
from fastapi import Depends, FastAPI, HTTPException

from prometheus_fastapi_instrumentator import Instrumentator
from sqlalchemy.orm import Session

from . import crud, database, models, schemas

models.Base.metadata.create_all(bind=database.engine)
app = FastAPI(title="QuickKart Product Service")
Instrumentator().instrument(app).expose(app)

def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

@app.get("/healthz")
def healthz():
    return {"status": "ok"}

@app.post("/products", response_model=schemas.ProductOut, status_code=201)
def add_product(prod_in: schemas.ProductCreate, db: Session = Depends(get_db)):
    if db.query(models.Product).filter(models.Product.name == prod_in.name).first():
        raise HTTPException(status_code=400, detail="Name already exists")
    return crud.create_product(db, prod_in)

@app.get("/products", response_model=list[schemas.ProductOut])
def all_products(db: Session = Depends(get_db)):
    return crud.list_products(db)


### product_svc\quickkart_product\crud.py
from sqlalchemy.orm import Session

from . import models, schemas


def create_product(db: Session, product_in: schemas.ProductCreate):
    product = models.Product(**product_in.dict())
    db.add(product)
    db.commit()
    db.refresh(product)
    return product


def list_products(db: Session):
    return db.query(models.Product).all()


### product_svc\quickkart_product\database.py
import os
from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

DB_PATH = os.getenv("DB_PATH", "/data/products.db")
SQLALCHEMY_DATABASE_URL = f"sqlite:///{DB_PATH}"

engine = create_engine(SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False})
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


### product_svc\quickkart_product\models.py
from sqlalchemy import Column, Integer, String, Float

from .database import Base

class Product(Base):
    __tablename__ = "products"
    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True, nullable=False)
    description = Column(String, nullable=True)
    price = Column(Float, nullable=False)


### product_svc\quickkart_product\schemas.py
from pydantic import BaseModel, Field

class ProductCreate(BaseModel):
    name: str = Field(min_length=1)
    description: str | None = None
    price: float = Field(gt=0)

class ProductOut(ProductCreate):
    id: int

    class Config:
        orm_mode = True


### user_svc\Dockerfile
# ---------- build stage ----------
FROM python:3.11-slim AS builder
WORKDIR /app
COPY requirements.txt .
RUN pip wheel --no-cache-dir --no-deps --wheel-dir /wheels -r requirements.txt

# ---------- runtime stage ----------
FROM python:3.11-slim
ENV PYTHONUNBUFFERED=1

# ---- add curl for health-checks ----
RUN apt-get update \
 && apt-get install -y --no-install-recommends curl \
 && rm -rf /var/lib/apt/lists/*
 
WORKDIR /app
COPY --from=builder /wheels /wheels
RUN pip install --no-cache /wheels/*
COPY quickkart_user/ ./quickkart_user/
EXPOSE 8000
CMD ["uvicorn", "quickkart_user.app:app", "--host", "0.0.0.0", "--port", "8000"]



### user_svc\quickkart_user\__init__.py


### user_svc\quickkart_user\app.py
from fastapi import Depends, FastAPI, HTTPException, Security, status
from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer

from prometheus_fastapi_instrumentator import Instrumentator
from sqlalchemy.orm import Session

from . import auth, crud, database, models, schemas

models.Base.metadata.create_all(bind=database.engine)

app = FastAPI(title="QuickKart User Service")
Instrumentator().instrument(app).expose(app)
bearer_scheme = HTTPBearer()


def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()


def get_current_user(
    creds: HTTPAuthorizationCredentials = Security(bearer_scheme),
    db: Session = Depends(get_db),
):
    try:
        payload = auth.decode_token(creds.credentials)
        email: str = payload.get("sub")
    except Exception:  # noqa: BLE001
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Invalid token")
    user = crud.get_user_by_email(db, email=email)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")
    return user


@app.get("/healthz")
def healthz():
    return {"status": "ok"}


@app.post("/register", response_model=schemas.UserOut, status_code=201)
def register(user_in: schemas.UserCreate, db: Session = Depends(get_db)):
    if crud.get_user_by_email(db, user_in.email):
        raise HTTPException(status_code=400, detail="Email already registered")
    user = crud.create_user(db, user_in)
    return user


@app.post("/login", response_model=schemas.Token)
def login(user_in: schemas.UserCreate, db: Session = Depends(get_db)):
    user = crud.get_user_by_email(db, user_in.email)
    if not user or not auth.verify_password(user_in.password, user.hashed_password):
        raise HTTPException(status_code=400, detail="Incorrect email or password")
    access_token = auth.create_access_token({"sub": user.email})
    return {"access_token": access_token}


@app.get("/verify", response_model=schemas.UserOut)
def verify_token(
    creds: HTTPAuthorizationCredentials = Security(bearer_scheme),
    db: Session = Depends(get_db),
):
    return get_current_user(creds, db)  # type: ignore[arg-type]


@app.get("/me", response_model=schemas.UserOut)
def me(current=Depends(get_current_user)):
    return current



### user_svc\quickkart_user\auth.py
import os
from datetime import datetime, timedelta
from typing import Any, Optional

from jose import jwt
from passlib.context import CryptContext

SECRET_KEY = os.getenv("JWT_SECRET", "changeme")
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = int(os.getenv("ACCESS_TOKEN_EXPIRE_MINUTES", "15"))

pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")


def hash_password(password: str) -> str:
    return pwd_context.hash(password)


def verify_password(plain: str, hashed: str) -> bool:
    return pwd_context.verify(plain, hashed)


def create_access_token(data: dict[str, Any], expires_delta: Optional[timedelta] = None):
    to_encode = data.copy()
    expire = datetime.utcnow() + (expires_delta or timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES))
    to_encode.update({"exp": expire})
    return jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)


def decode_token(token: str) -> dict[str, Any]:
    return jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])



### user_svc\quickkart_user\crud.py
from sqlalchemy.orm import Session

from . import models, schemas, auth


def get_user_by_email(db: Session, email: str):
    return db.query(models.User).filter(models.User.email == email).first()


def create_user(db: Session, user_in: schemas.UserCreate):
    hashed = auth.hash_password(user_in.password)
    user = models.User(email=user_in.email, hashed_password=hashed)
    db.add(user)
    db.commit()
    db.refresh(user)
    return user



### user_svc\quickkart_user\database.py
import os

from sqlalchemy import create_engine
from sqlalchemy.orm import declarative_base, sessionmaker

DB_PATH = os.getenv("DB_PATH", "/data/users.db")
SQLALCHEMY_DATABASE_URL = f"sqlite:///{DB_PATH}"

engine = create_engine(
    SQLALCHEMY_DATABASE_URL, connect_args={"check_same_thread": False}
)
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()



### user_svc\quickkart_user\models.py
from sqlalchemy import Column, Integer, String

from .database import Base

class User(Base):
    __tablename__ = "users"

    id = Column(Integer, primary_key=True, index=True)
    email = Column(String, unique=True, index=True, nullable=False)
    hashed_password = Column(String, nullable=False)



### user_svc\quickkart_user\schemas.py
from pydantic import BaseModel, EmailStr


class UserCreate(BaseModel):
    email: EmailStr
    password: str


class UserOut(BaseModel):
    id: int
    email: EmailStr

    class Config:
        orm_mode = True


class Token(BaseModel):
    access_token: str
    token_type: str = "bearer"



